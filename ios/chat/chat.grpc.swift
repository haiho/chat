//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: chat.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Grpc_ChatClient, then call methods of this protocol to make API calls.
internal protocol Grpc_ChatClientProtocol {
  func register(_ request: Grpc_AuthRequest, callOptions: CallOptions?) -> UnaryCall<Grpc_AuthRequest, Grpc_AuthResponse>
  func deregister(_ request: Grpc_Request, callOptions: CallOptions?) -> UnaryCall<Grpc_Request, Grpc_Response>
  func login(_ request: Grpc_AuthRequest, callOptions: CallOptions?) -> UnaryCall<Grpc_AuthRequest, Grpc_AuthResponse>
  func logout(_ request: Grpc_Request, callOptions: CallOptions?) -> UnaryCall<Grpc_Request, Grpc_Response>
  func listen(_ request: Grpc_ListenRequest, callOptions: CallOptions?, handler: @escaping (Grpc_Envelope) -> Void) -> ServerStreamingCall<Grpc_ListenRequest, Grpc_Envelope>
  func send(_ request: Grpc_Envelope, callOptions: CallOptions?) -> UnaryCall<Grpc_Envelope, Grpc_Response>
  func store(_ request: Grpc_StoreRequest, callOptions: CallOptions?) -> UnaryCall<Grpc_StoreRequest, Grpc_StoreResponse>
}

internal final class Grpc_ChatClient: GRPCClient, Grpc_ChatClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the grpc.Chat service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// Unary call to Register
  ///
  /// - Parameters:
  ///   - request: Request to send to Register.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func register(_ request: Grpc_AuthRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_AuthRequest, Grpc_AuthResponse> {
    return self.makeUnaryCall(path: "/grpc.Chat/Register",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Deregister
  ///
  /// - Parameters:
  ///   - request: Request to send to Deregister.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deregister(_ request: Grpc_Request, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_Request, Grpc_Response> {
    return self.makeUnaryCall(path: "/grpc.Chat/Deregister",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Login
  ///
  /// - Parameters:
  ///   - request: Request to send to Login.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func login(_ request: Grpc_AuthRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_AuthRequest, Grpc_AuthResponse> {
    return self.makeUnaryCall(path: "/grpc.Chat/Login",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Logout
  ///
  /// - Parameters:
  ///   - request: Request to send to Logout.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func logout(_ request: Grpc_Request, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_Request, Grpc_Response> {
    return self.makeUnaryCall(path: "/grpc.Chat/Logout",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Server streaming call to Listen
  ///
  /// - Parameters:
  ///   - request: Request to send to Listen.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func listen(_ request: Grpc_ListenRequest, callOptions: CallOptions? = nil, handler: @escaping (Grpc_Envelope) -> Void) -> ServerStreamingCall<Grpc_ListenRequest, Grpc_Envelope> {
    return self.makeServerStreamingCall(path: "/grpc.Chat/Listen",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Unary call to Send
  ///
  /// - Parameters:
  ///   - request: Request to send to Send.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func send(_ request: Grpc_Envelope, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_Envelope, Grpc_Response> {
    return self.makeUnaryCall(path: "/grpc.Chat/Send",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Store
  ///
  /// - Parameters:
  ///   - request: Request to send to Store.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func store(_ request: Grpc_StoreRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_StoreRequest, Grpc_StoreResponse> {
    return self.makeUnaryCall(path: "/grpc.Chat/Store",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Grpc_ChatProvider: CallHandlerProvider {
  func register(request: Grpc_AuthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_AuthResponse>
  func deregister(request: Grpc_Request, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_Response>
  func login(request: Grpc_AuthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_AuthResponse>
  func logout(request: Grpc_Request, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_Response>
  func listen(request: Grpc_ListenRequest, context: StreamingResponseCallContext<Grpc_Envelope>) -> EventLoopFuture<GRPCStatus>
  func send(request: Grpc_Envelope, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_Response>
  func store(request: Grpc_StoreRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_StoreResponse>
}

extension Grpc_ChatProvider {
  internal var serviceName: String { return "grpc.Chat" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Register":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.register(request: request, context: context)
        }
      }

    case "Deregister":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deregister(request: request, context: context)
        }
      }

    case "Login":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.login(request: request, context: context)
        }
      }

    case "Logout":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.logout(request: request, context: context)
        }
      }

    case "Listen":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listen(request: request, context: context)
        }
      }

    case "Send":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.send(request: request, context: context)
        }
      }

    case "Store":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.store(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


// Provides conformance to `GRPCPayload` for request and response messages
extension Grpc_AuthRequest: GRPCProtobufPayload {}
extension Grpc_AuthResponse: GRPCProtobufPayload {}
extension Grpc_Request: GRPCProtobufPayload {}
extension Grpc_Response: GRPCProtobufPayload {}
extension Grpc_ListenRequest: GRPCProtobufPayload {}
extension Grpc_Envelope: GRPCProtobufPayload {}
extension Grpc_StoreRequest: GRPCProtobufPayload {}
extension Grpc_StoreResponse: GRPCProtobufPayload {}

